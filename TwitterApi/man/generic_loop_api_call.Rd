% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{generic_loop_api_call}
\alias{generic_loop_api_call}
\title{Generic looped API calls to Twitter}
\usage{

  generic_loop_api_call(api = "https://api.twitter.com/1.1/statuses/user_timeline.json",
  param_list = list(screen_name = "ChelseaFC", count = 200, tweet_mode =
  "extended"), key_to_iterate_to = "max_id",
  value_iteration_operation = "min(id)-1", loops = 5)
}
\arguments{
\item{api}{String. The url of the API to call}

\item{param_list}{List. List of keys and values to provide as parameters to the first API call. See details.}

\item{key_to_iterate_to}{String. The key of the parameter to assign the new looped value to.}

\item{value_iteration_operation}{String. The operation to apply to give the value for the iteration operation.}

\item{loops}{Integer. Number of loops to run before stopping.}
}
\value{
List of looped results from the API call
}
\description{
Twitter has request limits for each API call.
For example, you might want the most recent 1000 requests for a user, but the recent tweets by user API is limited at 200 tweets per request (see \href{https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline}{get-statuses-user_timeline})
To help with this, after the first call is sent, twitter gives back some information that informs what parameter the next api call should use to retrieve the next set (e.g. for tweets 201-400, take the the minimum id recieved in the previous call minus one, and set the max_id parameter to that).
This function automatically takes that information sent back, evaluates the operation specified for \code{value_iteration_operation} and applies that into the next API call under the key in \code{key_to_iterate_to}
}
\details{
Twitter has specified custom functionality for 'pagination' that this function addresses.
See \href{https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines}{'working with timelines'} for more details
}
\examples{
# (Examples not run due to need for authentication)

# (Standard): Recent tweets per user (200 per request, but 3200 available to scrape)
# api_1 <- 'https://api.twitter.com/1.1/statuses/user_timeline.json'
# params_1 <- list(screen_name = 'ChelseaFC', count = 200, tweet_mode = 'extended')
# result_1 <-  generic_loop_api_call(key_to_iterate_to = 'max_id', value_iteration_operation = 'min(id)-1', loops = 5, api = api_1, param_list = params_1)
# Gets the most recent 1000 tweets from  user "ChelseaFC"

# (Premium): Search tweets
# api_2 <- 'https://api.twitter.com/1.1/tweets/search/fullarchive/development.json' # note this app already has a sandbox environment set up, called 'development'
# params_2 <- list(query = 'from:ChelseaFC', maxResults = 100, toDate = format(Sys.Date(), '\%Y\%m\%d\%H\%M'), fromDate = format(Sys.Date()-365, '\%Y\%m\%d\%H\%M'))
# result_2 <-  generic_loop_api_call(key_to_iterate_to = 'next', value_iteration_operation = 'min(`next`)', loops = 2, api = api_2, param_list = params_2)
# Gets the most relevant 200 tweets when searching using operator "from:ChelseaFC"

}
\seealso{
\href{https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines}{Twitter pagination}
\href{https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline}{Twitter recent tweets by user}
\href{https://developer.twitter.com/en/docs/tweets/search/overview/premium}{Twitter premium search}
}
\keyword{api}
\keyword{call}
\keyword{generic}
\keyword{twitter}
